# telegram_bot.py
import os
import tempfile
import requests
from flask import Flask, request, jsonify

# –≤–∞—à–∏ –º–æ–¥—É–ª–∏ (–æ—Å—Ç–∞–≤–ª—è—é –∫–∞–∫ –µ—Å—Ç—å)
from convert import convert_video_to_audio
from recognize import transcribe_audio
from evaluate import evaluate_service
from sheets import append_row  # –µ—Å–ª–∏ –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ ‚Äî –º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ç—å

# --- –ö–æ–Ω—Ñ–∏–≥ ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN") or os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN (–∏–ª–∏ TELEGRAM_BOT_TOKEN) –Ω–µ –∑–∞–¥–∞–Ω")

TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"
TELEGRAM_FILE_URL = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}"

WEBHOOK_SECRET = os.getenv("TELEGRAM_WEBHOOK_SECRET", "")
PORT = int(os.getenv("PORT", "8080"))

# --- Flask ---
app = Flask(__name__)

# --- –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ ---

def tg_send_text(chat_id: int, text: str):
    try:
        requests.post(f"{TELEGRAM_API_URL}/sendMessage",
                      json={"chat_id": chat_id, "text": text},
                      timeout=20)
    except Exception:
        pass  # –Ω–µ —Ä–æ–Ω—è–µ–º –≤–µ–±—Ö—É–∫ –∏–∑-–∑–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

def tg_get_file_path(file_id: str) -> str:
    """
    –®–∞–≥ 1: /getFile -> –≤–µ—Ä–Ω—É—Ç—å file_path (–º–æ–∂–µ—Ç –±—Ä–æ—Å–∏—Ç—å HTTPError)
    """
    r = requests.get(f"{TELEGRAM_API_URL}/getFile",
                     params={"file_id": file_id},
                     timeout=30)
    r.raise_for_status()
    data = r.json()
    if not data.get("ok") or "result" not in data or "file_path" not in data["result"]:
        raise RuntimeError(f"Telegram getFile –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {data}")
    return data["result"]["file_path"]

def tg_download_by_path(file_path: str, dst_path: str):
    """
    –®–∞–≥ 2: /file/bot<token>/<file_path> -> —Å–∫–∞—á–∞—Ç—å –≤ dst_path
    """
    url = f"{TELEGRAM_FILE_URL}/{file_path}"
    with requests.get(url, stream=True, timeout=120) as r:
        r.raise_for_status()
        with open(dst_path, "wb") as f:
            for chunk in r.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)

def pick_media(message: dict):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (file_id, suggested_name) –∏–∑ message –¥–ª—è —Ç–∏–ø–æ–≤: video, voice, audio, document (–º–µ–¥–∏–∞).
    –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç ‚Äî (None, None).
    """
    if "video" in message:
        v = message["video"]
        return v["file_id"], v.get("file_name") or "input.mp4"
    if "voice" in message:
        v = message["voice"]
        return v["file_id"], "input.ogg"
    if "audio" in message:
        a = message["audio"]
        return a["file_id"], a.get("file_name") or "input.mp3"
    # –∏–Ω–æ–≥–¥–∞ –∫–∞–º–µ—Ä—ã –ø—Ä–∏—Å—ã–ª–∞—é—Ç —Ñ–∞–π–ª –∫–∞–∫ document (mp4/ogg)
    if "document" in message:
        d = message["document"]
        mime = (d.get("mime_type") or "").lower()
        name = d.get("file_name") or "input.bin"
        if any(x in mime for x in ("video", "audio", "ogg", "mp4", "mpeg", "x-matroska")) or \
           name.lower().endswith((".mp4", ".mov", ".mkv", ".avi", ".webm", ".ogg", ".oga", ".mp3", ".wav")):
            return d["file_id"], name
    return None, None

# --- –†–æ—É—Ç—ã ---

@app.get("/health")
def health():
    return jsonify({"ok": True})

@app.post("/")
def webhook():
    # –∑–∞—â–∏—Ç–Ω—ã–π —Å–µ–∫—Ä–µ—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–∞
    if WEBHOOK_SECRET and request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return jsonify({"ok": False, "error": "invalid webhook secret"}), 401

    update = request.get_json(silent=True) or {}
    message = update.get("message") or update.get("edited_message") or {}
    chat = message.get("chat") or {}
    chat_id = chat.get("id")
    if not chat_id:
        return jsonify({"ok": True})

    file_id, file_name = pick_media(message)
    if not file_id:
        tg_send_text(chat_id, "–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ/–≥–æ–ª–æ—Å/–∞—É–¥–∏–æ —Å –¥–∏–∞–ª–æ–≥–æ–º.")
        return jsonify({"ok": True})

    try:
        # 1) –ø–æ–ª—É—á–∞–µ–º file_path (–í–ê–ñ–ù–û: —Å–Ω–∞—á–∞–ª–∞ getFile, –ø–æ—Ç–æ–º —Å–∫–∞—á–∏–≤–∞–µ–º)
        file_path = tg_get_file_path(file_id)

        # 2) —Å–∫–∞—á–∏–≤–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.TemporaryDirectory() as tmpd:
            src_path = os.path.join(tmpd, os.path.basename(file_path) or file_name)
            tg_download_by_path(file_path, src_path)

            # 3) –µ—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∏–º –≤ WAV, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
            lower = src_path.lower()
            if lower.endswith((".mp4", ".mov", ".mkv", ".avi", ".webm")):
                audio_path = convert_video_to_audio(src_path, output_format="wav")
            else:
                audio_path = src_path

            # 4) —Ä–∞—Å–ø–æ–∑–Ω–∞—ë–º –∏ –æ—Ü–µ–Ω–∏–≤–∞–µ–º
            transcript = transcribe_audio(audio_path)
            score = evaluate_service(transcript)

        # 5) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç
        head = transcript[:250]
        dots = "‚Ä¶" if len(transcript) > 250 else ""
        lines = [
            f"üìù –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ (–∫—Ä–∞—Ç–∫–æ): {head}{dots}",
            "üìä –û—Ü–µ–Ω–∫–∞:"
        ]
        for k, v in score.items():
            lines.append(f"‚Ä¢ {k}: {v}")
        tg_send_text(chat_id, "\n".join(lines))

        # 6) –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî –ø–∏—à–µ–º –≤ Google Sheet
        try:
            # –ü—Ä–∏–º–µ—Ä: append_row(transcript, score, chat_id, message.get("date"))
            append_row(transcript, score, chat_id, message.get("date"))
        except Exception as e_sheet:
            # –Ω–µ –≤–∞–ª–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –∏–∑-–∑–∞ —Ç–∞–±–ª–∏—Ü—ã
            tg_send_text(chat_id, f"‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –æ—Ü–µ–Ω–æ–∫ –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã –ø–æ–∑–∂–µ (—Ç–∞–±–ª–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e_sheet})")

    except requests.HTTPError as http_err:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –ì–î–ï –∏–º–µ–Ω–Ω–æ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ ‚Äî —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ
        tg_send_text(chat_id, f"‚ö†Ô∏è HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Telegram API: {http_err}")
    except Exception as e:
        tg_send_text(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

    return jsonify({"ok": True})

if __name__ == "__main__":
    # –ù–∞ Render –ª—É—á—à–µ –∑–∞–ø—É—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑ gunicorn, –Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ —Ç–∞–∫:
    app.run(host="0.0.0.0", port=PORT)

