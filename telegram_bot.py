# telegram_bot.py
import os
import re
import time
import json
import tempfile
from collections import deque
from typing import Optional

import requests
from flask import Flask, request, jsonify

# –≤–∞—à–∏ –º–æ–¥—É–ª–∏
from convert import convert_video_to_audio
from recognize import transcribe_audio
from evaluate import evaluate_service
try:
    from sheets import append_row  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
except Exception:  # noqa: BLE001
    append_row = None

# --- –ö–æ–Ω—Ñ–∏–≥ ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN") or os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN (–∏–ª–∏ TELEGRAM_BOT_TOKEN) –Ω–µ –∑–∞–¥–∞–Ω")

TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"
TELEGRAM_FILE_URL = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}"

WEBHOOK_SECRET = os.getenv("TELEGRAM_WEBHOOK_SECRET", "")
PORT = int(os.getenv("PORT", "10000"))

# --- Flask ---
app = Flask(__name__)

# --- –£—Ç–∏–ª–∏—Ç—ã Telegram ---

def tg_send_text(chat_id: int, text: str):
    try:
        requests.post(
            f"{TELEGRAM_API_URL}/sendMessage",
            json={"chat_id": chat_id, "text": text},
            timeout=20,
        )
    except Exception:
        pass

def tg_get_file_path(file_id: str) -> str:
    r = requests.get(f"{TELEGRAM_API_URL}/getFile", params={"file_id": file_id}, timeout=30)
    r.raise_for_status()
    data = r.json()
    if not data.get("ok") or "file_path" not in data["result"]:
        raise RuntimeError(f"Telegram getFile –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {data}")
    return data["result"]["file_path"]

def tg_download_by_path(file_path: str, dst_path: str):
    url = f"{TELEGRAM_FILE_URL}/{file_path}"
    with requests.get(url, stream=True, timeout=120) as r:
        r.raise_for_status()
        with open(dst_path, "wb") as f:
            for chunk in r.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)

def pick_media(msg: dict):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (file_id, suggested_name) –¥–ª—è —Ç–∏–ø–æ–≤: video, video_note, animation, voice, audio, document(–º–µ–¥–∏–∞).
    –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞ ‚Äî (None, None).
    """
    if "video" in msg:
        v = msg["video"]
        return v["file_id"], v.get("file_name") or "input.mp4"
    if "video_note" in msg:
        v = msg["video_note"]
        return v["file_id"], "input.mp4"
    if "animation" in msg:
        a = msg["animation"]
        return a["file_id"], a.get("file_name") or "input.mp4"
    if "voice" in msg:
        v = msg["voice"]
        return v["file_id"], "input.ogg"
    if "audio" in msg:
        a = msg["audio"]
        return a["file_id"], a.get("file_name") or "input.mp3"
    if "document" in msg:
        d = msg["document"]
        mime = (d.get("mime_type") or "").lower()
        name = d.get("file_name") or "input.bin"
        if any(x in mime for x in ("video", "audio", "ogg", "mp4", "mpeg", "x-matroska")) or \
           name.lower().endswith((".mp4", ".mov", ".mkv", ".avi", ".webm", ".ogg", ".oga", ".mp3", ".wav")):
            return d["file_id"], name
    return None, None

# --- –°–µ—Å—Å–∏–∏: –∫–æ–ø–∏–º —á–∞—Å—Ç–∏ –ø–æ 5 –º–∏–Ω—É—Ç –∏ –ø–æ—Ç–æ–º –æ—Ü–µ–Ω–∏–≤–∞–µ–º —Ü–µ–ª–∏–∫–æ–º ---

SESSIONS = {}  # chat_id -> {"parts": deque, "started": ts, "last": ts, "open": True, "title": Optional[str]}
SESSION_IDLE_SEC = 25 * 60  # –∞–≤—Ç–æ-–∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–µ 25 –º–∏–Ω

def _get_order_from_name(name: str, caption: str) -> Optional[int]:
    s = f"{name or ''} {caption or ''}".lower()
    # ‚Äú‚Ä¶ —á–∞—Å—Ç—å 2/4‚Äù, ‚Äú‚Ä¶ 2 of 4‚Äù, ‚Äú‚Ä¶ (3)‚Äù, ‚Äú‚Ä¶-1‚Äù, ‚Äú‚Ä¶_01‚Äù
    m = (
        re.search(r"—á–∞—Å—Ç[—å–∏]\s*(\d+)", s)
        or re.search(r"(\d+)\s*of\s*\d+", s)
        or re.search(r"[\(_\- ](\d{1,3})[\). _-]?", s)
    )
    if m:
        try:
            return int(m.group(1))
        except ValueError:
            return None
    return None

def _ensure_session(chat_id: int, title: Optional[str] = None):
    now = int(time.time())
    sess = SESSIONS.get(chat_id)
    if not sess or not sess.get("open"):
        SESSIONS[chat_id] = {"parts": deque(), "started": now, "last": now, "open": True, "title": title}
    else:
        SESSIONS[chat_id]["last"] = now
        if title and not SESSIONS[chat_id].get("title"):
            SESSIONS[chat_id]["title"] = title

def _maybe_autoclose(chat_id: int) -> bool:
    sess = SESSIONS.get(chat_id)
    if not sess or not sess.get("open"):
        return False
    if int(time.time()) - sess["last"] > SESSION_IDLE_SEC:
        SESSIONS[chat_id]["open"] = False
        return True
    return False

def _process_finish(chat_id: int):
    sess = SESSIONS.get(chat_id)
    if not sess:
        tg_send_text(chat_id, "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.")
        return
    parts = list(sess["parts"])
    if not parts:
        tg_send_text(chat_id, "‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ —Å–µ—Å—Å–∏–∏. –ü—Ä–∏—à–ª–∏—Ç–µ —á–∞—Å—Ç–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ /finish.")
        return

    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –ø–æ extracted order, –∑–∞—Ç–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
    parts.sort(key=lambda p: (p["order"], p["ts"]))

    # —Ä–∞—Å–ø–æ–∑–Ω–∞—ë–º
    full_text_chunks = []
    for i, p in enumerate(parts, start=1):
        try:
            t = transcribe_audio(p["path"]).strip()
            full_text_chunks.append(t)
        except Exception as e:
            full_text_chunks.append(f"[–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —á–∞—Å—Ç–∏ {i}: {e}]")

    full_text = "\n".join(full_text_chunks).strip()

    # –æ—Ü–µ–Ω–∫–∞ —Ü–µ–ª–∏–∫–æ–º
    score = evaluate_service(full_text)

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    head = full_text[:400].replace("\n", " ")
    dots = "‚Ä¶" if len(full_text) > 400 else ""
    lines = [
        f"üß© –ß–∞—Å—Ç–µ–π: {len(parts)}",
        f"üìù –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ (–∫—Ä–∞—Ç–∫–æ): {head}{dots}",
        "üìä –û—Ü–µ–Ω–∫–∞:",
    ]
    for k, v in score.items():
        lines.append(f"‚Ä¢ {k}: {v}")
    tg_send_text(chat_id, "\n".join(lines))

    # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
    try:
        if append_row:
            # –ø—Ä–æ–±—É–µ–º –æ–±–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã
            try:
                append_row(full_text, score, chat_id, int(time.time()))
            except TypeError:
                append_row(score, full_text, {"chat_id": chat_id})
    except Exception as e_sheet:
        tg_send_text(chat_id, f"‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e_sheet}")

    # –æ—á–∏—Å—Ç–∫–∞
    for p in parts:
        try:
            os.remove(p["path"])
        except Exception:
            pass
    sess["parts"].clear()
    sess["open"] = False

# --- Health ---

@app.get("/health")
def health():
    return jsonify({"ok": True})

@app.get("/healthz")
def healthz():
    return jsonify({"ok": True})

# --- –í–µ–±—Ö—É–∫–∏: –ø—Ä–∏–Ω–∏–º–∞–µ–º –∏ –Ω–∞ "/" –∏ –Ω–∞ "/telegram/webhook" (—á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞—Ç—å—Å—è –≤ BotFather) ---

def _handle_update(update: dict):
    # –ª–æ–≥ –∞–ø–¥–µ–π—Ç–∞ (–∫–æ—Ä–æ—Ç–∫–æ)
    try:
        print("[TG UPDATE]", json.dumps(update, ensure_ascii=False)[:2000])
    except Exception:
        print("[TG UPDATE] <unserializable>")

    message = update.get("message") or update.get("edited_message") or {}
    chat = message.get("chat") or {}
    chat_id = chat.get("id")
    if not chat_id:
        return

    text = (message.get("text") or "").strip()
    low_text = text.lower()

    # –∫–æ–º–∞–Ω–¥—ã
    if low_text in ("/start", "/start@your_bot"):
        _ensure_session(chat_id)
        tg_send_text(chat_id, "üü¢ –°–µ—Å—Å–∏—è –Ω–∞—á–∞—Ç–∞. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —á–∞—Å—Ç–∏ (–ø–æ 5 –º–∏–Ω). –ö–æ–≥–¥–∞ –≤—Å—ë ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ /finish.")
        return

    if low_text in ("/finish", "/finish@your_bot"):
        _ensure_session(chat_id)
        SESSIONS[chat_id]["open"] = False
        _process_finish(chat_id)
        return

    # –º–µ–¥–∏–∞
    file_id, file_name = pick_media(message)
    if not file_id:
        # –Ω–µ –º–µ–¥–∏–∞ –∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä/–ø–æ–¥—Å–∫–∞–∑–∫–∞
        if low_text:
            tg_send_text(chat_id, "‚ÑπÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ/–≥–æ–ª–æ—Å/–∞—É–¥–∏–æ. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ‚Äî /finish.")
        return

    caption = message.get("caption") or ""
    _ensure_session(chat_id, title=file_name)

    try:
        # —Å–∫–∞—á–∏–≤–∞–µ–º
        path = tg_get_file_path(file_id)
        with tempfile.TemporaryDirectory() as tmpd:
            src_path = os.path.join(tmpd, os.path.basename(path) or (file_name or "input.bin"))
            tg_download_by_path(path, src_path)

            # –≤–∏–¥–µ–æ ‚Üí WAV, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∫–∞–∫ –µ—Å—Ç—å
            lower = src_path.lower()
            if lower.endswith((".mp4", ".mov", ".mkv", ".avi", ".webm")):
                audio_path = convert_video_to_audio(src_path, output_format="wav")
            else:
                audio_path = src_path

            # –∫–æ–ø–∏—è –≤ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ñ–∞–π–ª (—á—Ç–æ–±—ã –ø–µ—Ä–µ–∂–∏–ª –≤—ã—Ö–æ–¥ –∏–∑ tmpdir)
            fd, stable_path = tempfile.mkstemp(suffix="_part.wav")
            os.close(fd)
            with open(stable_path, "wb") as wf, open(audio_path, "rb") as rf:
                wf.write(rf.read())

        order = _get_order_from_name(file_name or "", caption) or 10**6
        sess = SESSIONS[chat_id]
        sess["parts"].append({"order": order, "ts": int(time.time()), "path": stable_path, "name": file_name})
        sess["last"] = int(time.time())

        tg_send_text(chat_id, f"üì• –ü—Ä–∏–Ω—è–ª —Ñ–∞–π–ª: {file_name or '–±–µ–∑ –∏–º–µ–Ω–∏'}")
    except requests.HTTPError as http_err:
        tg_send_text(chat_id, f"‚ö†Ô∏è Telegram API: {http_err}")
        return
    except Exception as e:
        tg_send_text(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return

    # –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–∞–∏–≤–∞–ª–∏ –¥–æ–ª–≥–æ ‚Äî –∞–≤—Ç–æ-–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    finished = _maybe_autoclose(chat_id)
    if finished:
        _process_finish(chat_id)
    else:
        tg_send_text(chat_id, "‚úÖ –ß–∞—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–ª–∏ /finish.")

def _check_secret(req) -> Optional[tuple]:
    if WEBHOOK_SECRET:
        token = req.headers.get("X-Telegram-Bot-Api-Secret-Token")
        if token != WEBHOOK_SECRET:
            return {"ok": False, "error": "invalid webhook secret"}, 401
    return None

@app.post("/")
def webhook_root():
    bad = _check_secret(request)
    if bad:
        return jsonify(bad[0]), bad[1]
    update = request.get_json(silent=True) or {}
    _handle_update(update)
    return jsonify({"ok": True})

@app.post("/telegram/webhook")
def webhook_tg():
    bad = _check_secret(request)
    if bad:
        return jsonify(bad[0]), bad[1]
    update = request.get_json(silent=True) or {}
    _handle_update(update)
    return jsonify({"ok": True})

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=PORT)

