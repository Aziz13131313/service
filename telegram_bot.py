# telegram_bot.py
import os
import io
import json
import shutil
import tempfile
import requests
from pathlib import Path

from recognize import ensure_wav, transcribe_audio
from evaluate import evaluate_service

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN") or os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN (–∏–ª–∏ TELEGRAM_BOT_TOKEN) –Ω–µ –∑–∞–¥–∞–Ω")

TG_API = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"
TG_FILE = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}"

# ===================== –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ =====================

def tg_send_text(chat_id: int, text: str):
    try:
        requests.post(
            f"{TG_API}/sendMessage",
            json={"chat_id": chat_id, "text": text},
            timeout=20,
        )
    except Exception:
        pass

def tg_get_file_path(file_id: str) -> str:
    r = requests.get(f"{TG_API}/getFile", params={"file_id": file_id}, timeout=30)
    r.raise_for_status()
    data = r.json()
    if not data.get("ok") or "result" not in data or "file_path" not in data["result"]:
        raise RuntimeError(f"Telegram getFile returned: {data}")
    return data["result"]["file_path"]

def tg_download_to(file_path: str, dst_path: str):
    url = f"{TG_FILE}/{file_path}"
    with requests.get(url, stream=True, timeout=180) as r:
        r.raise_for_status()
        with open(dst_path, "wb") as f:
            for chunk in r.iter_content(8192):
                if chunk:
                    f.write(chunk)

def pick_media(message: dict):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (file_id, suggested_name) –∏–∑ message.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º video, voice, audio, document (–º–µ–¥–∏–∞).
    """
    if "video" in message:
        v = message["video"];    return v["file_id"], (v.get("file_name") or "input.mp4")
    if "voice" in message:
        v = message["voice"];    return v["file_id"], "input.ogg"
    if "audio" in message:
        a = message["audio"];    return a["file_id"], (a.get("file_name") or "input.mp3")
    if "document" in message:
        d = message["document"]
        name = d.get("file_name") or "input.bin"
        mime = (d.get("mime_type") or "").lower()
        if any(x in mime for x in ("video", "audio", "ogg", "mp4", "mpeg", "x-matroska")) \
           or name.lower().endswith((".mp4", ".mov", ".mkv", ".avi", ".webm", ".ogg", ".oga", ".mp3", ".wav", ".m4a")):
            return d["file_id"], name
    return None, None

def chat_dir(chat_id: int) -> Path:
    p = Path(tempfile.gettempdir()) / f"tg_{chat_id}"
    p.mkdir(parents=True, exist_ok=True)
    return p

# ===================== –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ =====================

def handle_update(update: dict):
    message = update.get("message") or update.get("edited_message") or {}
    chat = message.get("chat") or {}
    chat_id = chat.get("id")
    if not chat_id:
        return

    text = (message.get("text") or "").strip()

    # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞—Ç—á–µ–º –∫—É—Å–æ—á–∫–æ–≤
    if text.lower() in ("/start", "start"):
        shutil.rmtree(chat_dir(chat_id), ignore_errors=True)
        tg_send_text(chat_id, "üéô –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ —á–∞—Å—Ç—è–º–∏ (–¥–æ 5 –º–∏–Ω—É—Ç –∫–∞–∂–¥–∞—è). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ /finish.")
        return

    if text.lower() in ("/finish", "finish"):
        do_finish(chat_id, message)
        return

    # –ü—Ä–∏—ë–º –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤ (—á–∞—Å—Ç—è–º–∏)
    file_id, filename = pick_media(message)
    if not file_id:
        if text:
            # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç/—Å—Ç–∏–∫–µ—Ä—ã
            return
        tg_send_text(chat_id, "–ü—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ (–º–æ–∂–Ω–æ —á–∞—Å—Ç—è–º–∏ –¥–æ 5 –º–∏–Ω—É—Ç). –ó–∞–≤–µ—Ä—à–∏—Ç–µ ‚Äî –∫–æ–º–∞–Ω–¥–æ–π /finish.")
        return

    try:
        cdir = chat_dir(chat_id)
        file_path = tg_get_file_path(file_id)
        dst = cdir / f"part_{len(list(cdir.glob('part_*')))+1}_{os.path.basename(filename)}"
        tg_download_to(file_path, str(dst))
        tg_send_text(chat_id, f"‚úÖ –ß–∞—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–ª–∏ /finish.")
    except Exception as e:
        tg_send_text(chat_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–∞—Å—Ç—å: {e}")

def do_finish(chat_id: int, message: dict):
    parts = sorted(chat_dir(chat_id).glob("part_*"))
    if not parts:
        tg_send_text(chat_id, "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ.")
        return

    # —Å–æ–±–µ—Ä—ë–º —Ç–µ–∫—Å—Ç –ø–æ–∫—É—Å–æ—á–Ω–æ (—á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, —á—Ç–æ –µ—Å–ª–∏ —á–∞—Å—Ç—å —É–ø–∞–ª–∞ ‚Äî –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–π–¥—É—Ç)
    all_text = []
    had_error = False

    for idx, part in enumerate(parts, start=1):
        try:
            wav_path = ensure_wav(str(part))  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É WAV
            text = transcribe_audio(wav_path) # Whisper (–∞–≤—Ç–æ ru/kk)
            all_text.append(text)
        except Exception as e:
            had_error = True
            all_text.append(f"[–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —á–∞—Å—Ç–∏ {idx}: {e}]")

    transcript = "\n".join(all_text).strip()

    # –û—Ü–µ–Ω–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä–∞–≤–∏–ª–æ/LLM –∏–∑ evaluate_service
    try:
        score = evaluate_service(transcript)
    except Exception as e:
        score = {"–û—à–∏–±–∫–∞": f"–û—Ü–µ–Ω–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {e}"}

    # –°–±–æ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    head = transcript.replace("\n", " ")[:350]
    dots = "‚Ä¶" if len(transcript) > 350 else ""
    lines = [
        f"üß© –ß–∞—Å—Ç–µ–π: {len(parts)}",
        f"üìù –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ (–∫—Ä–∞—Ç–∫–æ): {head}{dots}",
        "üìä –û—Ü–µ–Ω–∫–∞:"
    ]
    # –∫—Ä–∞—Å–∏–≤—ã–π –ø–æ—Ä—è–¥–æ–∫
    order = [
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ",
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
        "–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ",
        "–û–ø—Ä–æ—Å",
        "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞",
        "–ü—Ä–æ—â–∞–Ω–∏–µ –∏ –æ—Ç—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç",
        "–û—à–∏–±–∫–∞",
    ]
    for k in order:
        if k in score:
            lines.append(f"‚Ä¢ {k}: {score[k]}")
    for k, v in score.items():
        if k not in order:
            lines.append(f"‚Ä¢ {k}: {v}")

    tg_send_text(chat_id, "\n".join(lines))

    # –ü–∏—à–µ–º –≤ Google Sheets (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
    try:
        from sheets import append_row  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        extra = {"–°–µ—Å—Å–∏—è": str(message.get("message_id", ""))}
        append_row(score, transcript, extra)
    except Exception as e:
        tg_send_text(chat_id, f"‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")

    # —á–∏—Å—Ç–∏–º
    shutil.rmtree(chat_dir(chat_id), ignore_errors=True)


